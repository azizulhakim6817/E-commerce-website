##### 1. Domain add => no API thrit-party use it >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  app.use(cors({
   credentials: true, 
   origin: "http://localhost:8000" 
}));

###< Epi-35 >>>>>>>>>>>>>>>>>> React.js installl >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
     @@@ part-1 @@@ client side to backend connection  ??????????????????????
     import { defineConfig } from "vite";
     import react from "@vitejs/plugin-react";
     
     // https://vite.dev/config/
     export default defineConfig({
       plugins: [react()],
       server: {
         proxy: {
           "/api": {
               target: "http://localhost:9000",
               },
               },
               },
               });
               
      @@@ part-2 @@@ app.jsx ?????????????????????????????????????????????????????????????
      //! Client side connection to backend..........
      app.use(express.static("client/dist"));
      
      app.use("*", (req, res) => {
        res.sendFile(Path.resolve(__dirname, "client", "index.html"));
      });


    @@@ 3 @@@ Package isntall .........................
           npm i axios
           npm i bootstrap
           npm i bootstrap-icons
           npm i html-react-parser
           npm i js-cookie
           npm i lottie-react
           npm i react-bootstrap
           npm i react-hot-toast
           npm i react-image-gallery
           npm i react-loading-skeleton
           npm i react-router-dom
           npm i react-star-ratings
           npm i sweetalert2
           npm i zustand


###< part-36 >>>>>>>>>>>>>>>>>> Home page componect >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. CSS Framwork add.........................................

import "bootstrap/dist/css/bootstrap.css";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap";
import "./assets/css/main.css";
import "./assets/css/animate.css";

2. Router managemant......................................
import { BrowserRouter, Route, Routes } from "react-router-dom";
import HomePage from "./pages/HomePage.jsx";

const App = () => {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<HomePage />} />
      </Routes>
    </BrowserRouter>
  );
};
export default App;

2. appNavebar......................................
    => Announcebar
    => AppNavbar => link

3. Layout.........................................
import AppNavbar from "./AppNavbar.jsx";
import Footer from "./footer.jsx";

const Layout = (props) => {
  return (
    <>
      <AppNavbar />
      {props.children}
      <Footer />
    </>
  );
};
export default Layout;

4. Footer...........................................

###< part-37 >>>>>>>>>>>>>>>>>> Home page componect => loading skeleton >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1..........................................................................
@@@@ main.jsx ................
import 'react-loading-skeleton/dist/skeleton.css'

2. SliderSkeleton............................................
   => loading skeleton ((Animations))
3. Array from ....................................
    {Array.from({ length: 4 }).map(() => {
       return (
        <div> 
        4
        </div>
       )

4. Features / Categories / Brannds / products / 

###< part-38 >>>>>>>>>>>>>>>>>> Home page => create  Store and API call >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. FeaturesStore.jsx...................................................................
import create from "zustand";
import axios from "axios";

const ProductStore = create((set) => ({
  BrandList: null,
  BrandListRequest: async () => {
    let res = await axios.get("/api/v1/ProductBrandList");
    if (res.data[status] === success) {
      set({ BrandList: res.data[data] });
    }
  },

  CategoryLis: null,
  CategoryListRequest: async () => {
    let res = await axios.get("/api/v1/ProductCategoryList");
    if (res.data[status] === success) {
      set({ CategoryLis: res.data[data] });
    }
  },

  SliderList: null,
  SliderListRequest: async () => {
    let res = await axios.get("/api/v1/ProductSliderList");
    if (res.data[status] === success) {
      set({ SliderList: res.data[data] });
    }
  },

  ListByProduct: null,
  ListByProductRequest: async () => {
    let res = await axios.get("/api/v1/ProductListByRemark");
    if (res.data[status] === success) {
      set({ ListByProduct: res.data[data] });
    }
  },
}));

export default ProductStore;

###< part-39 >>>>>>>>>>>>>>>>>> Home page => create  Store and API call >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1............................................................................................
import { create } from "zustand"; // Ensure to import create correctly
import axios from "axios";

const FeaturesStore = create((set) => ({
  FeatureList: null,
  FeatureListRequest: async () => {
    let res = await axios.get("/api/v1/FeaturesList");
    if (res.data["status"] === "success") {
      set({ FeatureList: res.data["data"] });
    }
  },
}));

export default FeaturesStore;

2.................................................................................
import { useEffect } from "react";
import Layout from "../component/layout/Layout.jsx";
import Slider from "./../component/product/Slider.jsx";
import Brands from "../component/product/brands.jsx";
import Features from "../component/product/Features.jsx";
import Categories from "./../component/product/Categories";

const HomePage = () => {
  const {
    BrandListRequest,
    CategoryListRequest,
    SliderListRequest,
    ListByRemarkRequest,
  } = ProductStore();

  const { FeatureListRequest } = FeaturesStore();

  useEffect(() => {
    async () => {
      await SliderListRequest();
      await FeatureListRequest();
      await CategoryListRequest();
      await ListByRemarkRequest();
      await BrandListRequest();
    };
  }, []);

  return (
    <Layout>
      <Slider />
      <Features />
      <Categories />
      <Products />
      <Brands />
    </Layout>
  );
};

export default HomePage;


3. brands add to =>  Store => ProsuctStore + BrandsList....Api call..........................

4. ....componect => Slider.jsx.................................................................
import React from "react";
import ProductStore from "../../store/ProductsStore.jsx";
import SliderSkeleton from "./../../skeleton/SliderSkeleton.jsx";

const Slider = () => {
  const { SliderList } = ProductStore();
  if (SliderList === null) {
    return <SliderSkeleton />;
  } else {
    return <div></div>;
  }
};

export default Slider;

###< part-40 >>>>>>>>>>>>>>>>>> Home page => Brands / Categories / Features componect >>>>>>>>>>>>>>>>>>
1.............................................
=> Brand list component add Api to dynamic 
=> Categories list component add Api to dynamic 
=> FeatureList component add Api to dynamic 

###< part-41 >>>>>>>>>>>>>>>>>> Home page => Slider componect >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

###< part-42 >>>>>>>>>>>>>>>>>> Home page => Products componect >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
             1. import StarRatings from "react-star-ratings/build/star-ratings.js";

             2. if (item["discount"] === true) {
              price = (
                <p className="bodyMedium  text-dark my-1">
                  Price:<strike> ${item["price"]} </strike> $
                  {item["discountPrice"]}{" "}
                </p>
              );
            }

            3.   <Link
            to={`/details/{item["_id"]}`}
            className="card shadow-sm h-100 rounded-3 bg-white"
          >
            <img
              className="w-50 rounded-top-2"
              src={item["image"]}
            />
            <div className="card-body">
              <p className="bodySmal text-secondary my-1">
                {item["title"]}
              </p>
              {price}
              <StarRatings
                rating={parseFloat(item["star"])}
                starRatedColor="red"
                starDimension="15px"
                starSpacing="2px"
              />
            </div>
          </Link


###< part-43 >>>>>>>>>>>>>>>>>> Home page => Listing by Brand / Category >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  1. API create and setup ...........................
          
  ListProduct: null,
  ListByBrandRequest: async (BrandID) => {
    set({ ListProduct: null });
    let res = await axios.get(`/api/v1/ProductListByBrand/${BrandID}`);
    if (res.data["status"] === "success") {
      set({ ListProduct: res.data["data"] });
    }
  },
  ListByCategoryRequest: async (CategoryID) => {
    set({ ListProduct: null });
    let res = await axios.get(`/api/v1/ProductListByCategory/${CategoryID}`);
    if (res.data["status"] === "success") {
      set({ ListProduct: res.data["data"] });
    }
  },
}));

2. pages => ProductByBrand.jsx.................................................
import React, { useEffect } from "react";
import { useParams } from "react-router-dom";
import Layout from "../component/layout/layout.jsx";
import ProductStore from "../store/ProductsStore.jsx";
import ProductList from "../component/product/ProductList.jsx";

const ProductByBrand = () => {
  const { ListByBrandRequest } = ProductStore();
  const { id } = useParams();

  useEffect(() => {
    (async () => {
      await ListByBrandRequest(id);
    })();
  }, [id]);

  return (
    <Layout>
      <ProductList />
    </Layout>
  );
};

export default ProductByBrand;

4. App.jsx => Router create ....................................................

    => <Route path="/by-brand/:id" element={<ProductByBrand />} />

5. componect => productList.jsx .................................................
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import StarRatings from "react-star-ratings/build/star-ratings.js";
import ProductsSkeleton from "./../../skeleton/ProductsSkeleton.jsx";
import ProductStore from "./../../store/ProductsStore.jsx";

const ProductList = () => {
  const {
    ListProduct,
    BrandListRequest,
    BrandList,
    CategoryList,
    CategoryListRequest,
    ListByFilterRequest,
  } = ProductStore();
  let [Filter, SetFilter] = useState({
    brandID: "",
    categoryID: "",
    priceMax: "",
    priceMin: "",
  });

  const inputOnChange = async (name, value) => {
    SetFilter((data) => ({
      ...data,
      [name]: value,
    }));
  };

  useEffect(() => {
    (async () => {
      BrandList === null ? await BrandListRequest() : null;
      CategoryList === null ? await CategoryListRequest() : null;

      let isEveryFilterPropertyEmpty = Object.values(Filter).every(
        (value) => value === ""
      );
      !isEveryFilterPropertyEmpty ? await ListByFilterRequest(Filter) : null;
    })();
  }, [Filter]);

  5. SearchKeyword => .........................................................................
     2. ProductStore.jsx ...................     
      SearchKeyword: "",
      SearchKeyword: async (Keyword) => {
        set({ SearchKeyword: Keyword });
      },

    1. AppNavbar.jsx.............................
         const AppNavbar = () => {
            const { SetSearchKeyword, SearchKeyword } = ProductStore();
        @@@ return.....................()...............
            <input
            onChange={(e) => SetSearchKeyword(e.target.value)}
            value={SearchKeyword}
            className="form-control"
            type="search"
            placeholder="Search"
            aria-label="Search"
          />
          <Link
            to={
              SearchKeyword.length > 0 ? `by/keyowrd{SearchKeyword}` : `/`
            }
            className="btn btn-outline-dark"
            typ
     
            

###< part-44 >>>>>>>>>>>>>>>>>> Filter Api => Category, Brnad // Min-Mix >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    const ListByFilterService = async (req) => {
  try {
    let matchConditon = {};

    if (req.body["categoryID"]) {
      matchConditon["categoryID"] = new ObjectId(req.body["categoryID"]);
    }

    if (req.body["brandID"]) {
      matchConditon["brandID"] = new ObjectId(req.body["brandID"]);
    }

    let matchStage = { match: matchConditon };

    let AddFieldStage = {
      addFields: { numericPrice: { toInt: "price" } },
    };

    let priceMin = parseInt(req, body["priceMin"]);
    let priceMax = parseInt(req, body["priceMax"]);

    let PriceMatchConditions = {};

    if (!isNaN(priceMin)) {
      PriceMatchConditions["numericPrice"] = { gte: priceMin };
    }
    if (!isNaN(priceMax)) {
      PriceMatchConditions["numericPrice"] = {
        ...(PriceMatchConditions["numericPrice"] || {}),
        lte: priceMax,
      };
    }
    let priceMatchStage = { match: PriceMatchConditions };

    let JoinWithByBrandStage = {
      lookup: {
        from: "brands",
        localField: "brandID",
        foreignField: "_id",
        as: "brand",
      },
    };
    let JoinWithByCategoryStage = {
      lookup: {
        from: "categories",
        localField: "categoryID",
        foreignField: "_id",
        as: "category",
      },
    };

    let UnwindBrandStage = { unwind: "brand" };
    let UnwindCategoryStage = { unwind: "category" };

    let ProjectionStage = {
      projection: {
        "brand._id": 0,
        "category._id": 0,
        categoryID: 0,
        brandID: 0,
      },
    };

    let data = await ProductModel.aggregate([
      matchStage,
      AddFieldStage,
      priceMatchStage,
      JoinWithByBrandStage,
      JoinWithByCategoryStage,
      UnwindBrandStage,
      UnwindCategoryStage,
      ProjectionStage,
    ]);

    return { status: "success", data: data };
  } catch (error) {
    return { status: "fail", data: error }.toString();
  }
};

###< part-45 >>>>>>>>>>>>>>>>>> front-End => ilter Api => Category, Brnad // Min-Mix >>>>>>>>>>>>>>>>>>>
1...................................................................................
const ProductList = () => {
  const {
    ListProduct,
    BrandListRequest,
    BrandList,
    CategoryList,
    CategoryListRequest,
    ListByFilterRequest,
  } = ProductStore();

  let [Filter, SetFilter] = useState({
    brandID: "",
    categoryID: "",
    priceMax: "",
    priceMin: "",
  });

  const inputOnChange = async (name, value) => {
    SetFilter((data) => ({
      ...data,
      [name]: value,
    }));
  };

  useEffect(() => {
    (async () => {
      BrandList === null ? await BrandListRequest() : null;
      CategoryList === null ? await CategoryListRequest() : null;

      let isEveryFilterPropertyEmpty = Object.values(Filter).every(
        (value) => value === ""
      );
      !isEveryFilterPropertyEmpty ? await ListByFilterRequest(Filter) : null;
    })();
  }, [Filter]);

  return (
    <div className="container mt-2">
      <div className="row">
        <div className="col-md-3 p-2">
          <div className="card vh-100 p-3 shadow-sm">
            <label className="form-label mt-3">Brands</label>
            <select
              value={Filter.brandID}
              onChange={async (e) => {
                await inputOnChange("brandID", e.target.value);
              }}
              className="form-control form-select"
            >
              <option value="">Choose Brand</option>
              {BrandList !== null ? (
                BrandList.map((item, i) => {
                  return (
                    <option value={item["_id"]}>{item["brandName"]}</option>
                  );
                })
              ) : (
                <option></option>
              )}
            </select>
            <label className="form-label mt-3">Categories</label>
            <select
              value={Filter.categoryID}
              onChange={async (e) => {
                await inputOnChange("categoryID", e.target.value);
              }}
              className="form-control form-select"
            >
              <option value="">Choose Category</option>
              {CategoryList !== null ? (
                CategoryList.map((item, i) => {
                  return (
                    <option value={item["_id"]}>{item["categoryName"]}</option>
                  );
                })
              ) : (
                <option></option>
              )}
            </select>
            <label className="form-label mt-3">
              Maximum Price ${Filter.priceMax}
            </label>
            <input
              value={Filter.priceMax}
              onChange={async (e) => {
                await inputOnChange("priceMax", e.target.value);
              }}
              min={0}
              max={1000000}
              step={1000}
              type="range"
              className="form-range"
            />

            <label className="form-label mt-3">
              Minimum Price ${Filter.priceMin}
            </label>
            <input
              value={Filter.priceMin}
              onChange={async (e) => {
                await inputOnChange("priceMin", e.target.value);
              }}
              min={0}
              max={1000000}
              step={1000}
              type="range"
              className="form-range"
            />
          </div>
        </div>

###< part-46 >>>>>>>>>>>>>>>>>> front-End => ilter Api => Category, Brnad // Min-Mix >>>>>>>>>>>>>>>>>>>
1.. ProductStor.jsx ............................................
Details: null,
  DetailsRequest: async (id) => {
    set({ Details: null });
    let res = await axios.post(`/api/v1/ProductDetails/${id}`);
    //console.log(res)
    if (res.data["status"] === "success") {
      set({ Details: res.data["data"] });
    }
  },

  ReviewList: null,
  ReviewListRequest: async (id) => {
    set({ ReviewList: null });
    let res = await axios.post(`/api/v1/ProductReviewList/${id}`);
    if (res.data["status"] === "success") {
      set({ ReviewList: res.data["data"] });
    }
  },

2. app.jsx =>  <Route path="/Details/:id" element={<ProductDetails />} />

2. pages => Details.jsx ...................................................................
import React, { useEffect } from "react";
import Layout from "../component/layout/layout";
import Details from "./../component/product/Details";
import { useParams } from "react-router-dom";
import Brands from "../component/product/Brands";
import ProductStore from "./../store/ProductsStore";

const ProductDetails = () => {
  const { BrandList, BrandListRequest, ReviewListRequest, DetailsRequest } =
    ProductStore();

  const { id } = useParams();

  useEffect(() => {
    (async () => {
      await DetailsRequest(id);
      await ReviewListRequest(id);
      BrandList === null ? await BrandListRequest() : null;
    })();
  });

  return (
    <div>
      <Layout>
        <Details />
        <Brands />
      </Layout>
    </div>
  );
};

export default ProductDetails;

3. component =>Product =>  ProductDetails.jsx....................................................
import React from "react";

const Details = () => {
  return (
    <div>
      <div className="container mt-2">
        <div className="row">
          <div className="col-md-7 p-3">
            <ProductImages />
          </div>
          <div className="col-md-5 p-3">
            <h4>title</h4>
            <p className="text-muted bodySmal my-1">Category</p>
            <p className="text-muted bodySmal my-1">Brand</p>
            <p className="bodySmal mb-2 mt-1">shortDes</p>
            <span>
              <strike class="text-secondary">$price</strike> $discountPrice{" "}
            </span>
            <div className="row">
              <div className="col-4 p-2">
                <label className="bodySmal">Size</label>
                <select className="form-control my-2 form-select">
                  <option value="">Size</option>
                </select>
              </div>
              <div className="col-4  p-2">
                <label className="bodySmal">Color</label>
                <select className="form-control my-2 form-select">
                  <option value="">Color</option>
                </select>
              </div>
              <div className="col-4  p-2">
                <label className="bodySmal">Quantity</label>
                <div className="input-group my-2">
                  <button className="btn btn-outline-secondary">-</button>
                  <input
                    type="text"
                    className="form-control bg-light text-center"
                    readOnly
                  />
                  <button className="btn btn-outline-secondary">+</button>
                </div>
              </div>
              <div className="col-4  p-2">
                <button className="btn w-100 btn-success">Add to Cart</button>
              </div>
              <div className="col-4  p-2">
                <button className="btn w-100 btn-success">Add to Wish</button>
              </div>
            </div>
          </div>
        </div>
        <div className="row mt-3">
          <ul className="nav nav-tabs" id="myTab" role="tablist">
            <li className="nav-item" role="presentation">
              <button
                className="nav-link active"
                id="Speci-tab"
                data-bs-toggle="tab"
                data-bs-target="#Speci-tab-
     pane"
                type="button"
                role="tab"
                aria-controls="Speci-tab-pane"
                aria-selected="true"
              >
                Specifications
              </button>
            </li>
            <li className="nav-item" role="presentation">
              <button
                className="nav-link"
                id="Review-tab"
                data-bs-toggle="tab"
                data-bs-target="#Review-tab-pane"
                type="button"
                role="tab"
                aria-controls="Review-tab-pane"
                aria-selected="false"
              >
                Review
              </button>
            </li>
          </ul>
          <div className="tab-content" id="myTabContent">
            <div
              className="tab-pane fade show active"
              id="Speci-tab-pane"
              role="tabpanel"
              aria-labelledby="Speci-
     tab"
              tabIndex="0"
            ></div>
            <div
              className="tab-pane fade"
              id="Review-tab-pane"
              role="tabpanel"
              aria-labelledby="Review-tab"
              tabIndex="0"
            >
              <ul className="list-group list-group-flush"></ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Details;

4. componect => Product => ProductImages.jsx...........................................................
import React from "react";

const ProductImages = () => {
  return <div></div>;
};

export default ProductImages;

4. componect => Skeleton => ProductDetailsSkeleton.jsx................................................

###< part-47 >>>>>>>>>>>>>>>>>> front-End => Details.jsx with Product Details componect >>>>>>>>>>>>>>>>>>>
1. Details.jsx....................
const Details = () => {


  const { Details, ReviewList } = ProductStore();
  //console.log(Details);

  if (Details === null) {
    return <DetailsSkeleton />;
  } else {
    return (
      <div>
        <div className="container mt-2">
          <div className="row">
            <div className="col-md-7 p-3">
              <ProductImages />
            </div>
            <div className="col-md-5 p-3">
              <h4>{Details[0]["title"]}</h4>
              <p className="text-muted bodySmal my-1">
                Category : {Details[0]["category"]["categoryName"]}
              </p>
              <p className="text-muted bodySmal my-1">
                Brand : {Details[0]["brand"]["brandName"]}
              </p>
              <p className="bodySmal mb-2 mt-1">{Details[0]["shortDes"]} </p>

              {/*  Price ...........................................................*/}
              {Details[0]["discount"] ? (
                <span className="bodyXLarge">
                  Price :
                  <strike class="text-secondary">{Details[0]["price"]}</strike>
                  {Details[0]["discountPrice"]}
                </span>
              ) : (
                <span className="bodyXLarge">Price: {Details[0]["price"]}</span>
              )}

2. size // color .......................................................................................
    <div className="col-4 p-2">
                  {/* ..Size........................................................ */}
                  <label className="bodySmal">Size</label>
                  <select className="form-control my-2 form-select">
                    {Details[0]["details"]["size"].split(",").map((item, i) => {
                      return <option value={item}>{item}</option>;
                    })}
                  </select>
                </div>
                <div className="col-4  p-2">
                  {/* Color........................................................ */}
                  <label className="bodySmal">Color</label>
                  <select className="form-control my-2 form-select">
                    {Details[0]["details"]["color"]
                      .split(",")
                      .map((item, i) => {
                        return <option value={item}>{item}</option>;
                      })}
                  </select>
                </div>

3...Quantity.=> Details.jsx.....................................................................................

const [quantity, setQuantity] = useState(1);
  const incrementQuantity = () => {
    setQuantity((quantity) => quantity + 1);
  };
  const decrementQuantity = () => {
    if (quantity > 1) {
      setQuantity((quantity) => quantity - 1);
    }
  };


{/*  Quantity......................................................... */}
                <div className="col-4  p-2">
                  <label className="bodySmal">Quantity</label>
                  <div className="input-group my-2">
                    <button
                      onClick={decrementQuantity}
                      className="btn btn-outline-secondary"
                    >
                      -
                    </button>
                    <input
                      value={quantity}
                      type="text"
                      className="form-control bg-light text-center"
                      readOnly
                    />
                    <button
                      onClick={incrementQuantity}
                      className="btn btn-outline-secondary"
                    >
                      +
                    </button>
                  </div>
      
4...Specifications.......................................................................................

     1. import parse from "html-react-parser";

     2..............{/* des => import parse from "html-react-parser"; ......................l........*/}
     {parse(Details[0]["details"]["des"])}

5.ProductImages =>  Product Details Image show gallery........................................................
         1.....1st steps.............................

              import React from "react";
              import ProductStore from "../../store/ProductsStore";
              import ImageGallery from "react-image-gallery";
              import "react-image-gallery/styles/css/image-gallery.css";

              const ProductImages = () => {
                const { Details } = ProductStore();

                let image = [
                  {
                    original: "https://picsum.photos/id/1018/1000/600/",
                    thumbnail: "https://picsum.photos/id/1018/250/150/",
                  },
                ];

                return (
                  <div>
                    <ImageGallery autoPlay={true} items={image} />
                  </div>
                );
              };

              export default ProductImages;

    2. 2snd steps.............................................................

    import React from "react";
    import ProductStore from "../../store/ProductsStore";
    import ImageGallery from "react-image-gallery";
    import "react-image-gallery/styles/css/image-gallery.css";
    
    const ProductImages = () => {
      const { Details } = ProductStore();
    
      let images = [
        {
          original: Details[0]["details"]["img1"],
          thumbnail: Details[0]["details"]["img1"],
        },
        {
          original: Details[0]["details"]["img2"],
          thumbnail: Details[0]["details"]["img2"],
        },
        {
          original: Details[0]["details"]["img3"],
          thumbnail: Details[0]["details"]["img3"],
        },
        {
          original: Details[0]["details"]["img4"],
          thumbnail: Details[0]["details"]["img4"],
        },
        {
          original: Details[0]["details"]["img5"],
          thumbnail: Details[0]["details"]["img5"],
        },
        {
          original: Details[0]["details"]["img6"],
          thumbnail: Details[0]["details"]["img6"],
        },
        {
          original: Details[0]["details"]["img7"],
          thumbnail: Details[0]["details"]["img7"],
        },
        {
          original: Details[0]["details"]["img8"],
          thumbnail: Details[0]["details"]["img8"],
        },
      ];
    
      return (
        <div>
          <ImageGallery autoPlay={true} items={images} />
        </div>
      );
    };
    
    export default ProductImages;
    
###< part-48 >>>>>>>>>>>>>>>>>> front-End => Details page => product Review list >>>>>>>>>>>>>>>>>>>
  1. Reviews.jsx file create .............................

  2. Details.jsx => add componect..........................
     {/* review component */}
     <Reviews />

  3. ProductDetails.jsx...=> Details.jsx..Reviews.jsx...................................

  const ProductDetails = () => {
    const { BrandList, DetailsRequest, ReviewListRequest, BrandListRequest } =
      ProductStore();
  
    const { id } = useParams();
  
    useEffect(() => {
      DetailsRequest(id);
      ReviewListRequest();
      BrandList === null ? BrandListRequest() : null;
    }, [id]);

4. Reviews.jsx...................................

   1. bootstrap website List ........
      

2.......................................................................................
import React from "react";
import StarRatings from "react-star-ratings/build/star-ratings.js";
import ProductStore from "../../store/ProductsStore";

const Reviews = () => {
  const { ReviewList } = ProductStore();
  return (
    <div>
      <ul className="list-group mt-4 list-group-flush">
        {ReviewList !== null ? (
          ReviewList.slice(0, 3).map((item, i) => {
            return (
              <li key={i} className="list-group-item bg-transparent">
                <h6 className="m-0 p-0">
                  <i class="bi bi-person-fill"></i>{" "}
                  {item["profile"]["cus_name"]}
                </h6>
                <StarRatings
                  rating={parseFloat(item["rating"])}
                  starRatedColor="#f5c60d"
                  starDimension="15px"
                  starSpacing="2px"
                />
                <p> {item["des"]}</p>
              </li>
            );
          })
        ) : (
          <span></span>
        )}
      </ul>
    </div>
  );
};

export default Reviews;


###< part-49 >>>>>>>>>>>>>>>>>> API => Legal Details API for Terms Privacy how to buy  >>>>>>>>>>>>>>>>>>>

1.. MongoDB json input data .....type => terms / about / contact / complain.............................
     id
     65996224f146b26ef78ccefd
     description
     "<p><strong>Lorem Ipsum</strong> is simply dummy text of the printing a…"
     type
     " terms"

###< part-50 >>>>>>>>>> Front-End => API => Legal Details API for Terms Privacy how to buy >>>>>>>>>>>>>>>>>>

***** Layout.jsx => Footer.jsx => Link to="/about"
***** App.jsx routes 
***** About.jsx
****** LegalContens.jsx
****** FeacuresStore.jsx => API calling

 1. Layout.jsx => Footer.jsx ....<p> <Link to="/terms"> </p>...................
      
     <div className="col-md-4">
     <h5 className="bodyMedium">Legals</h5>
     <p className="my-2">
       <Link className="nav-link" to="/about">
         About
       </Link>
     </p>
     <p className="my-2">
       <Link className="nav-link" to="/refund">
         Refund Policy
       </Link>
     </p>
     <p className="my-2">
       <Link className="nav-link" to="/privacy">
         Privacy & Policy
       </Link>
     </p>
     <p className="my-2">
       <Link className="nav-link" to="/terms">
         Terms
       </Link>
     </p>
   </div>
   <div className="col-md-4">
     <h5 className="bodyMedium">Information</h5>
     <p className="my-2">
       <Link className="nav-link" to="/how-to-buy">
         How to buy
       </Link>
     </p>
     <p className="my-2">
       <Link className="nav-link" to="/contact">
         Contact
       </Link>
     </p>
     <p className="my-2">
       <Link className="nav-link" to="/complain">
         Complain
       </Link>
     </p>
   </div>

  2..componect => pages => files create ...........................
     1. about
     2. refund
     3. privacy
     4. terms
     5. how-to-buy
     6. contact
     7. complain

3. commpnent => feacures => file crate => LegalContens.jsx................................
   1. LegalContens.jsx.

4. pages => about.jsx setup................................................................
  1...about.jsx.....................................................

  import React, { useEffect } from "react";
  import Layout from "./../component/layout/layout";
  import LegalContens from "../component/features/LegalContens";
  import FeaturesStore from "./../store/FeaturesStore";
  
  const About = () => {
    const { LegalDetialsRequest } = FeaturesStore();
  
    useEffect(() => {
      (async () => {
        await LegalDetialsRequest("about");
      })();
    }, []);
  
    return (
      <Layout>
        <LegalContens />
      </Layout>
    );
  };
  
  export default About;

5. App.jsx => routing => about add ...........................................

    1. <Route path="/about" element={<About />} />


6. stor => FeacuresStore.jsx => API Calling..................................

LegalDetials: null,
LegalDetialsRequest: async (type) => {
  let res = await axios.get(`/api/v1/FeaturesList{type}`);
  if (res.data["status"] === "success") {
    set({ LegalDetials: res.data["data"] });
  }
},

7..LegalContens.jsx...................................................

import React from "react";
import LegalContensSkeleton from "../../skeleton/LegalContensSkeleton";
import parse from "html-react-parser";
import FeaturesStore from "../../store/FeaturesStore";

const LegalContens = () => {
  const { LegalDetials } = FeaturesStore();

  if (LegalDetials === null) {
    return <LegalContensSkeleton />;
  } else {
    return (
      <div className="container mt-3">
        <div className="row">
          <div className="col-md-12">
            <div className="card p-4">
              {parse(LegalDetials[0]["description"])}
            </div>
          </div>
        </div>
      </div>
    );
  }
};

export default LegalContens;



8. commpnent => skeleton => LegalContensSkeleton.jsx.....................................
     1. code copy => ProductsSkeleton.jsx...........
     2.........LegalContensSkeleton.jsx......copy-past add ..........................

import React from "react";
import Skeleton from "react-loading-skeleton";

const LegalContensSkeleton = () => {
  return (
    <div className=" container">
      <div className="row">
        <div className="col-md-12">
          <div className="card p-4">
            {Array.from({ length: 4 }).map((_, i) => {
              return <Skeleton count={1} />
            })}
          </div>
        </div>
      </div>
    </div>
  );
};
export default LegalContensSkeleton;



###<>>>>>>>>>> Scrolling side tapbar (( uttom bro )) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1.ScrollingTop.jsx................................................................
import React, { useEffect, useState } from "react";

const ScrollingTop = () => {
  const handleScrollToTop = () => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  };
  const [isVisible, setIsVisible] = useState(false);

  const handleScroll = () => {
    if (window.pageYOffset > 250) {
      setIsVisible(true);
    } else {
      setIsVisible(false);
    }
  };

  useEffect(() => {
    window.addEventListener("scroll", handleScroll);
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <div
      style={{ display: isVisible ? "block" : "none" }}
      onClick={handleScrollToTop}
      className="scrollTop"
    >
      <i className="bi bi-arrow-up"></i>
    </div>
  );
};

export default ScrollingTop;

2. Layout.jsx.......................................................
const Layout = (props) => {
  return (
    <>
      <AppNavbar />
      {props.children}
      <ScrollingTop />
      <Footer />
    </>

3. main.css ...............................................................
.scrollTop {
  position: fixed;
  text-align: center;
  line-height: 50px;
  font-size: 24px !important;
  cursor: pointer;
  transition: 0.4s;
  z-index: 4444444;
  bottom: 70px;
  right: 10px;
  width: 50px;
  height: 50px;
  border-radius: 50%;

  background-color: rgb(168, 168, 168, 0.1);
}

.scrollTop:hover {
  background-color: rgb(78, 76, 76);
  color: white !important;
}



###< part-51 >>>>>>>>>> Login >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1. Component => LoginFrom.jsx.....OtpFrom................................................

import React from "react";
import UserSubmitButton from "./UserSubmitButton";
import UserStore from "../../store/UserStore";

const LoginForm = () => {
  let { LoginFormValue } = UserStore();
  return (
    <div className="container section">
      <div className="row d-flex justify-content-center">
       <div className="col-md-5">
          <div className="card p-5">
            <h4>Enter Your Email</h4>
            <p>A verification code will be sent to the email address you provide</p>
            <input value={LoginFormValue.email} placeholder="Email Address" type="email" className="form-control"/>
            <UserSubmitButton submit={false} className="btn mt-3 btn-success" text="Next"/>
          </div>
        </div>
      </div>
    </div>
  );
};
export default LoginForm;


2. Pages => LoginPage.jsx ..........Otp.jsx...........................................
import React from "react";
import Layout from "./../component/layout/layout";
import LoginForm from "../component/user/LoginForm";

const LoginPage = () => {
  return (
    <Layout>
      <LoginForm />
    </Layout>
  );
};
export default LoginPage;


3. App.jsx routing add ......................................................................
<Route path="/login" element={<LoginPage />} />
<Route path="/otp" element={<OtpPage />} />

4. Store => UserStore.jsx zustand create and setup .....................................................

import { create } from "zustand";
import axios from "axios";
import { getEmail, setEmail } from "../utility/utility";

const UserStore = create((set) => ({
  LoginFormValue: { email: "ABC" },

  isFormSubmit: false,
  UserOTPRequest: async (email) => {
    set({ isFormSubmit: true });
    let res = await axios.get(`http://localhost:8000/api/v1/UserOTP${email}`);
    setEmail(email);
    set({ isFormSubmit: false });
    return res.data["status"] === "success";
  },

  VerifyLoginRequest: async (otp) => {
    set({ isFormSubmit: false });
    let email = getEmail(email);
    let res = await axios.get(
      `http://localhost:8000/api/v1/VerifyLogin${email}/${otp}`
    );
    set({ isFormSubmit: true });
    return res.data["status"] === "success";
  },
}));

export default UserStore;

5. commpnent => utility => utility.js + ValidationHelper.js .................................
   1. utility.js....................
   import Swal from "sweetalert2";

export function unauthorized(code) {
  if (code === 401) {
    sessionStorage.clear();
    localStorage.clear();
    window.location.href = "/login";
  }
}

export function setEmail(email) {
  sessionStorage.setItem("email", email);
}

export function getEmail() {
  return sessionStorage.getItem("email");
}

export function TimestampToDate(timestamp) {
  let date = new Date(timestamp);
  const monthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];
  return (
    date.getDate() +
    " " +
    monthNames[date.getMonth()] +
    " " +
    date.getFullYear()
  );
}

export async function DeleteAlert() {
  const result = await Swal.fire({
    title: "Are you sure?",
    text: "You won't be able to revert this!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, delete it!",
    allowOutsideClick: false,
  });
  return result.isConfirmed;
}

export async function SuccessAlert(msg) {
  const result = await Swal.fire({
    text: msg,
    icon: "success",
    confirmButtonColor: "#198754",
    confirmButtonText: "OK",
    allowOutsideClick: false,
  });
  return result.isConfirmed;
}

export async function FailAlert(msg) {
  const result = await Swal.fire({
    text: msg,
    icon: "warning",
    confirmButtonColor: "#fcac3f",
    confirmButtonText: "Try Again",
    allowOutsideClick: false,
  });
  return result.isConfirmed;
}

export async function InfoAlert(msg) {
  const result = await Swal.fire({
    text: msg,
    icon: "info",
    confirmButtonColor: "#198754",
    confirmButtonText: "Go Ahead",
    allowOutsideClick: false,
  });
  return result.isConfirmed;
}

6. ValidationHelper.js ...................................................................

class ValidationHelper {
  static IsLater(value) {
    let OnlyLaterRegx =
      /^[A-Za-z\'\s\.\,\-\!\@\#\$\%\^\&\*\(\)\[\]\{\}\:\;\"\<\>\?\/\+\=\_\\\|`\~]+$/;
    return OnlyLaterRegx.test(value);
  }
  static IsEmail(value) {
    let EmailRegx = /\S+@\S+\.\S+/;
    return EmailRegx.test(value);
  }
  static IsMobile(value) {
    let MobileRegx = /(^(\+88|0088)?(01){1}[3456789]{1}(\d){8})$/;
    return MobileRegx.test(value);
  }
  static IsNumber(value) {
    let OnlyNumberRegx = /^\d+(\.\d+)?$/;
    return OnlyNumberRegx.test(value);
  }
  static IsNull(value) {
    return value == null;
  }
  static IsEmpty(value) {
    return value.length === 0;
  }
}
export default ValidationHelper;


6. .LoginFrom.jsx..............................................

1. Data proccesing.........................
<SubmitButton
submit={false}
className="btn mt-3 btn-success"
text="Next"
/>

7. user => SubmitButton.js ....................................................
import React from "react";
import UserStore from "../../store/UserStore";

const UserSubmitButton = (props) => {
  const { isFormSubmit } = UserStore();

  if (isFormSubmit === false) {
    return (
      <button onClick={props.onClick} type="submit" className={props.className}>
        {props.text}
      </button>
    );
  } else {
    return (
      <button disabled={true} className={props.className}>
        <div className="spinner-border spinner-border-sm" role="status"></div>
        Processing...
      </button>
    );
  }
};

export default UserSubmitButton;

###< part-52 >>>>>>>>>>Front-End => Login >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. product => productList.jsx => copy to past...............

2. UserStore.jsx ...........................................
LogingFormData: { email: "ABC" },

LoginFormOnChange: async (name, value) => {
  set((LogingFormData) => ({
    ...LogingFormData,
    [name]: value,
  }));
},


3. LoginForm.jsx................................................................
   1. ...............onFormSubmit...............................................
   import { useNavigate } from "react-router-dom";

   const LoginForm = () => {
      let navigate = useNavigate();
      let { LoginFormOnChange, LogingFormData } = UserStore();

       const onFormSubmit = async () => {
    if (!ValidationHelper.IsEmail(LogingFormData.email)) {
      toast.error("Valid Email Address Required");
    } else {
      let res = await UserOTPRequest(LogingFormData.email);
      res ? navigate("/otp") : toast.error("Something Went Wrong !");
    }
  };

  2...........onFormSubmit........................................
  <input
              value={LogingFormData.email}
              onChange={(e) => {
                LoginFormOnChange("email", e.target.value);
              }}
              placeholder="Email Address"
              type="email"
              className="form-control"
            />
            <UserSubmitButton
              onClick={onFormSubmit}
              className="btn mt-3 btn-success"
              text="Next"
            />


  3. ....Problem => input text.....next video-53...........................

###< part-53 >>>>>>>>>>Front-End => Login >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. ....Problem => input text.....next video-53. ===> UserStore.jsx................

1. UserStore.jsx => Otp.................................................

import { create } from "zustand";
import axios from "axios";
import { getEmail, setEmail } from "../utility/utility";

const UserStore = create((set) => ({

  LogingFormData: { email: "" },
  LoginFormOnChange: async (name, value) => {
    set((state) => ({
      LogingFormData: {
        ...state.LogingFormData,
        [name]: value,
      },
    }));
  },

  isFormSubmit: false,
  UserOTPRequest: async (email) => {
    set({ isFormSubmit: true });
    let res = await axios.get(`api/v1/UserOTP/{email}`);
    setEmail(email);
    set({ isFormSubmit: false });
    return res.data["status"] === "success";
  },
}));
export default UserStore;


2... OtpForm.jsx .....LoginForm.jsx...ValidationHelper.....Emil successfull notification..................

import React from "react";
import UserStore from "../../store/UserStore";
import ValidationHelper from "../../utility/ValidationHelper";
import toast from "react-hot-toast";
import { useNavigate } from "react-router-dom";
import UserSubmitButton from "./UserSubmitButton";

const OtpForm = () => {
  let navigate = useNavigate();
  let { VerifyLoginRequest, OTPFormOnChange, OTPFormData } = UserStore();

  const onFormSubmit = async () => {
    if (ValidationHelper.IsEmpty(OTPFormData.otp)) {
      toast.error("Valid PIN Required");
    } else {
      let res = await VerifyLoginRequest(OTPFormData.otp);
      res ? navigate("/") : toast.error("Something Went Wrong !");
    }
  };

  return (
    <div className="container section">
      <div className="row d-flex justify-content-center">
        <div className="col-md-5">
          <div className="card p-5">
            <h4>Enter Verification Code</h4>
            <p>
              A verification code has been sent to the email address you provide
            </p>
            <input
              value={OTPFormData.otp}
              onChange={(e) => {
                OTPFormOnChange("otp", e.target.value);
              }}
              placeholder="Verification"
              type="text"
              className="form-control"
            />
            <UserSubmitButton
              onClick={onFormSubmit}
              submit={false}
              className="btn mt-3 btn-success"
              text="Submit"
            />
          </div>
        </div>
      </div>
    </div>
  );
};

export default OtpForm;

3...UserStore.jsx => AppNavBar.jsx.................................................

import Cookies from "js-cookie";

 isLogin: () => {
    return !!Cookies.get("token");
  },

3...AppNavbar.jsx.............................................

import ProductStore from "../../store/ProductsStore";
import UserStore from "../../store/UserStore";
import UserSubmitButton from "../user/UserSubmitButton";
import { useNavigate } from "react-router-dom";

const AppNavbar = () => {
  let navigate = useNavigate();
  const { SetSearchKeyword, SearchKeyword } = ProductStore();
  const { isLogin, UserLogoutequest } = UserStore();

  const onLogout = async () => {
    await UserLogoutequest();
    sessionStorage.clear();
    localStorage.clear();
    navigate("/");
  };

  2......AppNavbar.jsx.............................................
  {isLogin() ? (
              <>
                <UserSubmitButton
                  onClick={onLogout}
                  text="Logout"
                  className="btn ms-3 btn-success d-flex"
                />
                <Link
                  type="button"
                  className="btn text-white ms-3 bg-dark"
                  to="/logout"
                >
                  Profile
                </Link>
              </>
            ) : (
              <Link
                type="button"
                className="btn text-white ms-3 bg-dark"
                to="/login"
              >
                Login
              </Link>
            )}



3. npm Package => npm react-hot-toast....=> Emil successfull notification..........
   1. Layout.jsx............................................

   import { Toaster } from "react-hot-toast";

   const Layout = (props) => {
     return (
       <>
         <AppNavbar />
         {props.children}
         <ScrollingTop />
         <Toaster position=" botton-center" />
         <Footer />
       </>
     );
   };


###< part-53 >>>>>>>>>>Front-End => Login => OTP >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
  1...................................
  
###< part-55 >>>>>>>>>> Front-End =>  Logout >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1...UserStore.jsx................./* Logout..............................*/

    UserLogoutequest: async () => {
      set({ isFormSubmit: true });
      let res = await axios.get(`api/v1/UserLogout`);
      set({ isFormSubmit: false });
      return res.data["status"] === "success";
    },

2...AppNavbar.jsx.............................................

import ProductStore from "../../store/ProductsStore";
import UserStore from "../../store/UserStore";
import UserSubmitButton from "../user/UserSubmitButton";
import { useNavigate } from "react-router-dom";

const AppNavbar = () => {
  let navigate = useNavigate();
  const { SetSearchKeyword, SearchKeyword } = ProductStore();
  const { isLogin, UserLogoutequest } = UserStore();

  const onLogout = async () => {
    await UserLogoutequest();
    sessionStorage.clear();
    localStorage.clear();
    navigate("/");
  };

  2......AppNavbar.jsx.............................................
  {isLogin() ? (
              <>
                <UserSubmitButton
                  onClick={onLogout}
                  text="Logout"
                  className="btn ms-3 btn-success d-flex"
                />
                <Link
                  type="button"
                  className="btn text-white ms-3 bg-dark"
                  to="/logout"
                >
                  Profile
                </Link>
              </>
            ) : (
              <Link
                type="button"
                className="btn text-white ms-3 bg-dark"
                to="/login"
              >
                Login
              </Link>
            )}


###< part-56 >>>>>>>>>> Profile >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1..ProfileSkeleton.jsx........................................................

import React from "react";
import { Skeleton } from "react-loading-skeleton";

const ProfileSkeleton = () => {
  return (
    <div className="container mt-5">
      <div className="card p-5 rounded-3">
        <h6>Customer Details</h6>
        <hr />
        <div className="row mb-4">
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
        </div>
        <h6>Shipping Details</h6>
        <hr />
        <div className="row">
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
        </div>
        <div className="row mt-4">
          <div className="col-md-3 p-2">
            <Skeleton count={2} />
          </div>
        </div>
      </div>
    </div>
  );
};
export default ProfileSkeleton;

2. store => UserStore.jsx...............Profile..............................................
/* Profile page ............................................... */
  ProfileForm: {
    cus_add: "",
    cus_city: "",
    cus_country: "",
    cus_fax: "",
    cus_name: "",
    cus_phone: "",
    cus_postcode: "",
    cus_state: "",
    ship_add: "",
    ship_city: "",
    ship_country: "",
    ship_name: "",
    ship_phone: "",
    ship_postcode: "",
    ship_state: "",
  },
  ProfileFormChange: (name, value) => {
    set((state) => ({
      ProfileForm: {
        ...state.ProfileForm,
        [name]: value,
      },
    }));
  },

  ProfileDetails: null,
  ProfileDetailsRequest: async () => {
    try {
      let res = await axios.get(`/api/v1/ReadProfile`);
      if (res.data["data"].length > 0) {
        set({ ProfileDetails: res.data["data"][0] });
        set({ ProfileForm: res.data["data"][0] });
      } else {
        set({ ProfileDetails: [] });
      }
    } catch (e) {
      unauthorized(e.response.status);
    }
  },

  ProfileSaveRequest: async (PostBody) => {
    try {
      set({ ProfileDetails: null });
      let res = await axios.post(`/api/v1/UpdataProfile`, PostBody);
      return res.data["status"] === "success";
    } catch (e) {
      unauthorized(e.response.status);
    }
  },
2. utility.js => unauthorized ...................................................
export function unauthorized(code) {
  if (code === 401) {
    sessionStorage.clear();
    localStorage.clear();
    window.location.href = "/login";
  }
}

3..ProfilePage.jsx............................................................
import Layout from "./../component/layout/layout";
import ProfileForm from "./../component/user/ProfileForm";

const ProfilePage = () => {
  return (
    <Layout>
      <ProfileForm />
    </Layout>
  );
};

export default ProfilePage;



3...ProfileForm.jsx................................................................
import { useEffect } from "react";
import UserStore from "../../store/UserStore";
import ProfileSkeleton from "../../skeleton/ProfileSkeleton";
import toast from "react-hot-toast";

const ProfileForm = () => {
  let {
    ProfileForm,
    ProfileFormChange,
    ProfileDetails,
    ProfileDetailsRequest,
    ProfileSaveRequest,
  } = UserStore();
  console.log(ProfileForm);

  useEffect(() => {
    (async () => {
      await ProfileDetailsRequest();
    })();
  }, []);

  const Save = async () => {
    let res = await ProfileSaveRequest(ProfileForm);
    if (res) {
      toast.success("Profile Updated");
      await ProfileDetailsRequest();
    }
  };

  if (ProfileDetails === null) {
    return <ProfileSkeleton />;
  } else {
    return (
      <div className="container mt-5">
        <div className="card p-5 rounded-3">
          <h6>Customer Details</h6>
          <hr />
          <div className="row mb-4">
            <div className="col-md-3 p-2">
              <label className="form-label">Customer Name </label>
              <input
                value={ProfileForm.cus_name}
                onChange={(e) => {
                  ProfileFormChange("cus_name", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Customer Phone </label>
              <input
                value={ProfileForm.cus_phone}
                onChange={(e) => {
                  ProfileFormChange("cus_phone", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>

            <div className="col-md-3 p-2">
              <label className="form-label">Customer Fax </label>
              <input
                value={ProfileForm.cus_fax}
                onChange={(e) => {
                  ProfileFormChange("cus_fax", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Customer Country </label>
              <input
                value={ProfileForm.cus_country}
                onChange={(e) => {
                  ProfileFormChange("cus_country", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Customer City </label>
              <input
                value={ProfileForm.cus_city}
                onChange={(e) => {
                  ProfileFormChange("cus_city", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Customer State </label>
              <input
                value={ProfileForm.cus_state}
                onChange={(e) => {
                  ProfileFormChange("cus_state", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Customer Post Code </label>
              <input
                value={ProfileForm.cus_postcode}
                onChange={(e) => {
                  ProfileFormChange("cus_postcode", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Customer Address</label>
              <input
                value={ProfileForm.cus_add}
                onChange={(e) => {
                  ProfileFormChange("cus_add", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
          </div>

          <h6>Shipping Details</h6>
          <hr />
          <div className="row">
            <div className="col-md-3 p-2">
              <label className="form-label">Shipping Name </label>
              <input
                value={ProfileForm.ship_name}
                onChange={(e) => {
                  ProfileFormChange("ship_name", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Shipping Phone </label>
              <input
                value={ProfileForm.ship_phone}
                onChange={(e) => {
                  ProfileFormChange("ship_phone", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Shipping Country </label>
              <input
                value={ProfileForm.ship_country}
                onChange={(e) => {
                  ProfileFormChange("ship_country", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Shipping City </label>
              <input
                value={ProfileForm.ship_city}
                onChange={(e) => {
                  ProfileFormChange("ship_city", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Shipping State </label>
              <input
                value={ProfileForm.ship_state}
                onChange={(e) => {
                  ProfileFormChange("ship_state", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Shipping Post Code </label>
              <input
                value={ProfileForm.ship_postcode}
                onChange={(e) => {
                  ProfileFormChange("ship_postcode", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
            <div className="col-md-3 p-2">
              <label className="form-label">Shipping Address</label>
              <input
                value={ProfileForm.ship_add}
                onChange={(e) => {
                  ProfileFormChange("ship_add", e.target.value);
                }}
                type="text"
                className="form-control "
              />
            </div>
          </div>

          <div className="row mt-4">
            <div className="col-md-3 p-2">
              <button onClick={Save} className="btn btn-success">
                Save
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }
};

export default ProfileForm;


###< part-57-1 >>>>>>>>>> Front-End => Mangage User Card >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1..cart => ..CartSubmitButton.jsx................................................................

import React from "react";

const CartSubmitButton = (props) => {
  let { isCartSubmit } = CartStore();
  if (isCartSubmit === false) {
    return (
      <button onClick={props.onClick} type="submit" className={props.className}>
        {props.text}
      </button>
    );
  } else {
    return (
      <button disabled={true} className={props.className}>
        <div className="spinner-border spinner-border-sm" role="status"></div>
        Processing...
      </button>
    );
  }
};
export default CartSubmitButton;

2....CartStore.jsx............................................................

import axios from "axios";
import create from "zustand";
import { unauthorized } from "../utility/utility";

const CartStore = create((set) => ({
  isCartSubmit: false,

  CartForm: { productID: "", color: "", qty: "1", size: "" },
  CartFormChange: (name, value) => {
    set((state) => ({
      CartForm: {
        ...state.CartForm,
        [name]: value,
      },
    }));
  },

  CartSaveRequest: async (PostBody, productID) => {
    try {
      set({ isCartSubmit: true });
      PostBody.productID = productID;
      let res = await axios.post(`/api/v1/SaveCartList`, PostBody);
      return res.data["status"] === "success";
    } catch (error) {
      unauthorized(error.response.status);
    } finally {
      set({ isCartSubmit: false });
    }
  },

  /* base count ..................... */
  CartList: null,
  CartCount: 0,
  CartListRequest: async () => {
    try {
      let res = await axios.get(`/api/v1/CartList`);
      set({ CartList: res.data["data"] });
      set({ CartCount: res.data["data"].length });
    } catch (error) {
      unauthorized(error.response.CartSaveRequest);
    }
  },
}));

export default CartStore;

###< part-58-2 >>>>>>>>>> Front-End =>  Card >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1.....Product => Dtails.jsx......................................................

import CartStore from "../../store/CartStore";
import toast from "react-hot-toast";
/* Add to Cart......................................... */
const addCart = async () => {
  let res = await CartSaveRequest(CartForm,  productID)
  if(res) {
    toast.success("Cart Item added")
    await CartSaveRequest()
  }
}

2..Product => Details.jsx => ...select => color // size add .......................................
value={CartForm.color}
onChange={(e) => {
  CartFormChange("color", e.target.value);
}}

3

3.....AppNavBar.jsx.....................................................
const { CartCount, CartListRequest } = CartStore();

useEffect(() => {
  (async () => {
    if (isLogin()) {
      await CartListRequest();
      //await WishListRequest();
    }
  })();
}, []);


<Link
to="/cart"
type="button"
className="btn ms-2 btn-light position-relative"
>
<i className="bi text-dark bi-bag"></i>
<span className="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-success">
  {CartCount}
</span>
</Link>


###< part-58-1 >>>>>>>>>> Front-End => Whish  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. WishStore.jsx......................................
2. WishSubmitButton.jsx......................................
3. product => Details.jsx......................................
4.....AppNavBar.jsx.....................................................

###< part-59-2 >>>>>>>>>> Front-End => Whish  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


###< part-60-3 >>>>>>>>>> Front-End => Whish  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


###< part-61 >>>>>>>>>> Front-End => Cart List // Show remove Checkout  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1..CartShore.jsx...................................................
CartList: null,
  CartCount: 0,
  CartTotal: 0,
  CartVatTotal: 0,
  CartPayableTotal: 0,

  CartListRequest: async () => {
    try {
      let res = await axios.get(`/api/v1/CartList`);
      set({ CartList: res.data["data"] });
      set({ CartCount: res.data["data"].length });
      let total = 0;
      let vat = 0;
      let payable = 0;
      res.data["data"].forEach((item, i) => {
        if (item["product"]["discount"] === true) {
          total =
            total +
            parseInt(item["qty"]) * parseInt(item["product"]["discountPrice"]);
        } else {
          total =
            total + parseInt(item["qty"]) * parseInt(item["product"]["price"]);
        }
      });

      vat = total * 0.05;
      payable = vat + total;
      set({ CartTotal: total });
      set({ CartVatTotal: vat });
      set({ CartPayableTotal: payable });
    } catch (e) {
      unauthorized(e.response.status);
    }
  },

  RemoveCartListRequest: async (cartID) => {
    try {
      set({ CartList: null });
      await axios.post(`/api/v1/RemoveCartList`, { _id: cartID });
    } catch (e) {
      unauthorized(e.response.status);
    }
  },

  /* Invoice................................................... */
  CreateInvoiceRequest: async () => {
    try {
      set({ isCartSubmit: true });
      let res = await axios.get(`/api/v1/CreateInvoice`);
      window.location.href = res.data["data"]["GatewayPageURL"];
    } catch (e) {
      unauthorized(e.response.status);
    } finally {
      set({ isCartSubmit: false });
    }
  },

  InvoiceList: null,
  InvoiceListRequest: async () => {
    try {
      let res = await axios.get(`/api/v1/InvoiceList`);
      set({ InvoiceList: res.data["data"] });
    } catch (e) {
      unauthorized(e.response.status);
    }
  },
}));

2..CartList.jsx..........................................................................................
const CartList = () => {
  const {
    CartTotal,
    CartVatTotal,
    CartPayableTotal,
    CartListRequest,
    CartList,
    CreateInvoiceRequest,
    RemoveCartListRequest,
  } = CartStore();

  useEffect(() => {
    (async () => {
      await CartListRequest();
    })();
  }, []);

  const remove = async (cartID) => {
    await RemoveCartListRequest(cartID);
    await CartListRequest();
  };

  if (CartList == null) {
    return <CartSkeleton />;
  } else if (CartList.length === 0) {
    return <NoData />;
  } else {

  <button
    onClick={() => remove(item["_id"])}
     className="btn btn-sm btn-outline-danger"
  >
    <i className="bi bi-trash"></i>
  </button>

  3...CartList.jsx..................................................................
  if (CartList == null) {
    return <CartSkeleton />;
  } else if (CartList.length === 0) {
    return <NoData />;
  } else {
    return (
      <div className="container mt-3">
        <div className="row">
          <div className="col-md-12">
            <div className="card p-4">
              <ul className="list-group list-group-flush">
                {CartList.map((item, i) => {
                  let price = item["product"]["price"];
                  if (item["product"]["discount"] === true) {
                    price = item["product"]["discountPrice"];
                  }

                  return (
                    <li className="list-group-item d-flex justify-content-between align-items-start">
                      <img
                        className="rounded-1"
                        width="90"
                        height="auto"
                        src={item["product"]["image"]}
                      />
                      <div className="ms-2 me-auto">
                        <p className="fw-lighter m-0">
                          {item["product"]["title"]}
                        </p>
                        <p className="fw-lighter my-1">
                          Unit Price: {price},Qty: {item["qty"]}, Size:{" "}
                          {item["size"]}, Color: {item["color"]}
                        </p>
                        <p className=" h6 fw-bold m-0 text-dark">
                          Total <i className="bi bi-currency-dollar"></i>
                          {parseInt(price) * parseInt(item["qty"])}
                        </p>
                      </div>
                      <button
                        onClick={() => remove(item["_id"])}
                        className="btn btn-sm btn-outline-danger"
                      >
                        <i className="bi bi-trash"></i>
                      </button>
                    </li>
                  );
                })}
              </ul>
              <div className="my-4">
                <ul className="list-group bg-transparent  list-group-flush">
                  <li className="list-group-item bg-transparent h6 m-0 text-dark">
                    <span className="float-end">
                      Total: <i className="bi bi-currency-dollar" />
                      {CartTotal}{" "}
                    </span>
                  </li>
                  <li className="list-group-item bg-transparent h6 m-0 text-dark">
                    <span className="float-end">
                      Vat(5%): <i className="bi bi-currency-dollar" />
                      {CartVatTotal}
                    </span>
                  </li>
                  <li className="list-group-item bg-transparent h6 m-0 text-dark">
                    <span className="float-end">
                      Payable: <i className="bi bi-currency-dollar" />
                      {CartPayableTotal}
                    </span>
                  </li>
                  <li className="list-group-item bg-transparent ">
                    <span className="float-end">
                      <CartSubmitButton
                        text="Check Out "
                        onClick={async () => {
                          await CreateInvoiceRequest();
                        }}
                        className="btn px-5 mt-2 btn-success"
                      />
                    </span>
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

4. commpnent => pages => OrderPage => create ........................................................
import React from "react";
import Layout from "./../component/layout/layout";

const OrderPage = () => {
  return <Layout></Layout>;
};
export default OrderPage;

###< part-62 >>>>>>>>>> Front-End => Show Order List  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
1. backend => InvoiceList API 
2. backend => imvoiceProductList API 

3. ...CartStor.jsx..............................................................
1.... CartStor.jsx............ ......................................
InvoiceList: null,
InvoiceListRequest: async () => {
  try {
    let res = await axios.get(`/api/v1/InvoiceList`);
    set({ InvoiceList: res.data["data"] });
  } catch (e) {
    unauthorized(e.response.status);
  }
},

1.1  CartStor.jsx...............................................................

   InvoiceDetails: null,
   InvoiceDetailsRequest: async (id) => {
     try {
       let res = await axios.get(`/api/v1/InvoiceProductList/{id}`);
       set({ InvoiceDetails: res.data["data"] });
     } catch (e) {
       unauthorized(e.response.status);
     }
   },

4. commpnent => InvoiceList.jsx....create ...........................................

   1. html code nai ?.....................................


   2. Pages => orderPage.jsx.........create.............................................
       1.orderPage.jsx.........................................................
       import React from "react";
        import Layout from "./../component/layout/layout";
        import InvoiceList from "../component/invoice/InvoiceList";

        const OrderPage = () => {
          return (
            <Layout>
              <InvoiceList />
            </Layout>
          );
        };
      export default OrderPage;
        
       2...App.jsx......................................................
       <Route path="/orders" element={<OrderPage />} />
      

   3. commpnent Invoice => InvoiceList.jsx.......create...............................................

    

      1.1..commpnent Invoice => InvoiceList.jsx....................................

          import React, { useEffect } from "react";
          import CartStore from "../../store/CartStore";
          import CartSkeleton from "../../skeleton/CartSkeleton";
          import NoData from "../layout/NoData";
          import { Link } from "react-router-dom";

          const InvoiceList = () => {
            const { InvoiceList, InvoiceListRequest } = CartStore();

            useEffect(() => {
              (async () => {
               await InvoiceListRequest();
              })();
            }, []);
          
            if (InvoiceList === null) {
              return <CartSkeleton />;
            } else if (InvoiceList.length === 0) {
              return <NoData />;
            } else {
              return (

4.  Pages => InvoicePage.jsx.......create...............................................
1..InvoicePage.jsx.......................................................................
      import React from "react";
import Layout from "../component/layout/layout";
import InvoiceDetails from "../component/invoice/InvoiceDetails";

const InvoicePage = () => {
  return (
    <Layout>
      <InvoiceDetails />
    </Layout>
  );
};

export default InvoicePage;

4.  commpnent Invoice => InvoiceDetails.jsx.......create...............................................
import React from 'react';

const InvoiceDetails = () => {
    return (
        <div>
            
        </div>
    );
};
export default InvoiceDetails;

###< part-63 >>>>>>>>>> Front-End => invoice product List Add create Review >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

1. 





8...App.jsx.....ScrollToTopOnNavigation........useLocation.............................................

const App = () => {
  function ScrollToTopOnNavigation() {
    const { pathname } = useLocation();
    useEffect(() => {
      const scroll = () => {
        window.scrollTo(0, 0);
      };
      requestAnimationFrame(scroll);
    }, [pathname]);
    return null;
  }
  return (
    <BrowserRouter>
      <ScrollToTopOnNavigation />
      <Routes>


